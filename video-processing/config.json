{
  "functions": [
    {
      "name": "video-processing",
      "objects": [
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "def main(_, action):\n    t = action.get_transport('memory', 'rdma_server')\n    t.serve()",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "mem3",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "func1",
                "func2",
                "func3"
              ],
              "dependents": [],
              "parents": []
            },
            "runtimeType": "memory",
            "withMerged": []
          },
          "version": "0.0.1"
        },
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "def main(_, action):\n    t = action.get_transport('memory', 'rdma_server')\n    t.serve()",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "mem1",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "func1",
                "func2",
                "func3"
              ],
              "dependents": [],
              "parents": []
            },
            "runtimeType": "memory",
            "withMerged": []
          },
          "version": "0.0.1"
        },
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "\nimport pickle\nimport threading\nimport numpy as np\nimport base64\nimport disaggrt.buffer_pool_lib as buffer_pool_lib\nfrom disaggrt.rdma_array import remote_array\n\nimport ffmpeg\nimport cv2\n\nSERVER_NUM = 4\nLOCK1 = threading.Lock()\nLOCK2 = threading.Lock()\n\ndef cyberpunk(image):\n    # \u53cd\u8f6c\u8272\u76f8\n    image_hls = cv2.cvtColor(image, cv2.COLOR_BGR2HLS)\n    image_hls = np.asarray(image_hls, np.float32)\n    hue = image_hls[:, :, 0]\n    hue[hue < 90] = 180 - hue[hue < 90]\n    image_hls[:, :, 0] = hue\n\n    image_hls = np.asarray(image_hls, np.uint8)\n    image = cv2.cvtColor(image_hls, cv2.COLOR_HLS2BGR)\n\n    image_lab = cv2.cvtColor(image, cv2.COLOR_BGR2Lab)\n    image_lab = np.asarray(image_lab, np.float32)\n    \n    # \u63d0\u9ad8\u50cf\u7d20\u4eae\u5ea6\uff0c\u8ba9\u4eae\u7684\u5730\u65b9\u66f4\u4eae\n    light_gamma_high = np.power(image_lab[:, :, 0], 0.8)\n    light_gamma_high = np.asarray(light_gamma_high / np.max(light_gamma_high) * 255, np.uint8)\n\n     # \u964d\u4f4e\u50cf\u7d20\u4eae\u5ea6\uff0c\u8ba9\u6697\u7684\u5730\u65b9\u66f4\u6697\n    light_gamma_low = np.power(image_lab[:, :, 0], 1.2)\n    light_gamma_low = np.asarray(light_gamma_low / np.max(light_gamma_low) * 255, np.uint8)\n\n    # \u8c03\u8272\u81f3\u504f\u7d2b\n    dark_b = image_lab[:, :, 2] * (light_gamma_low / 255) * 0.1\n    dark_a = image_lab[:, :, 2] * (1 - light_gamma_high / 255) * 0.3\n\n    image_lab[:, :, 2] = np.clip(image_lab[:, :, 2] - dark_b, 0, 255)\n    image_lab[:, :, 2] = np.clip(image_lab[:, :, 2] - dark_a, 0, 255)\n\n    image_lab = np.asarray(image_lab, np.uint8)\n    return cv2.cvtColor(image_lab, cv2.COLOR_Lab2BGR)\n\ndef processFrame(count, context_dict, action, width):\n    mem_name = \"mem\" + str(count)\n    LOCK1.acquire()\n    trans = action.get_transport(mem_name, 'rdma')\n    LOCK1.release()\n    trans.reg(buffer_pool_lib.buffer_size)\n\n    LOCK1.acquire()\n    buffer_pool = buffer_pool_lib.buffer_pool({mem_name:trans}, context_dict[\"buffer_pool_metadata\" + str(count)])\n    LOCK1.release()\n    load_frames_remote = remote_array(buffer_pool, metadata=context_dict[\"remote_input\" + str(count)])\n    in_frame = load_frames_remote.materialize()\n    frame_num = len(in_frame)\n    frame_index = 1 if count == 1 else frame_num\n    frame_list = []\n    for frame in in_frame:\n        in_frame_bgr = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)\n        current_width = int(width * (frame_index / frame_num))\n        in_frame_bgr[:, 0:current_width, :] = cyberpunk(in_frame_bgr[:, 0:current_width, :])\n        f = cv2.cvtColor(in_frame_bgr, cv2.COLOR_BGR2RGB)\n\n        frame_list.append(f)\n\n        if frame_index < frame_num:\n            frame_index += 1\n    \n    out_frame = np.asarray(frame_list)\n    LOCK1.acquire()\n    buffer_pool = buffer_pool_lib.buffer_pool({mem_name:trans}, context_dict[\"buffer_pool_metadata\" + str(count)])\n    LOCK1.release()\n    remote_output = remote_array(buffer_pool, input_ndarray=out_frame, transport_name=mem_name)\n    # update context\n    remote_input_metadata = remote_output.get_array_metadata()\n    LOCK2.acquire()\n    context_dict[\"remote_output\" + str(count)] = remote_input_metadata\n    context_dict[\"buffer_pool_metadata\" + str(count)] = buffer_pool.get_buffer_metadata()\n    LOCK2.release()\n\n\ndef main(params, action):\n    video_path = 'sample-mp4-file.mp4'\n    video_probe = ffmpeg.probe(video_path)\n    video_info = next((stream for stream in video_probe['streams'] if stream['codec_type'] == 'video'), None)\n    width = int(video_info['width'])\n\n    context_dict_in_b64 = params[\"func1\"][0]['meta']\n    context_dict_in_byte = base64.b64decode(context_dict_in_b64)\n    context_dict = pickle.loads(context_dict_in_byte)\n\n    threads = []\n    for i in range(1, SERVER_NUM+1):\n        t = threading.Thread(target=processFrame, args=(i, context_dict, action, width))\n        t.start()\n        threads.append(t)\n\n    count = 0\n    for t in threads:\n        count += 1\n        print(count)\n        t.join()\n\n    context_dict_in_byte = pickle.dumps(context_dict)\n    return {'meta': base64.b64encode(context_dict_in_byte).decode(\"ascii\")}\n",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "func2",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "mem1",
                "mem2",
                "mem3",
                "mem4"
              ],
              "dependents": [
                "func3"
              ],
              "parents": [
                "func1"
              ]
            },
            "runtimeType": "compute",
            "withMerged": []
          },
          "version": "0.0.1"
        },
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "\nimport pickle\nimport threading\nimport numpy as np\nimport base64\nimport disaggrt.buffer_pool_lib as buffer_pool_lib\nfrom disaggrt.rdma_array import remote_array\n\nimport ffmpeg\n\nSERVER_NUM = 4\nLOCK1 = threading.Lock()\nLOCK2 = threading.Lock()\n\ndef processDataSlice(count, in_bytes, context_dict, action, height, width):\n    mem_name = \"mem\" + str(count)\n    LOCK1.acquire()\n    trans = action.get_transport(mem_name, 'rdma')\n    LOCK1.release()\n    trans.reg(buffer_pool_lib.buffer_size)\n    buffer_pool = buffer_pool_lib.buffer_pool({mem_name:trans})\n    in_frame = (\n        np\n            .frombuffer(in_bytes, np.uint8)\n            .reshape([-1, height, width, 3])\n    )\n    remote_input = remote_array(buffer_pool, input_ndarray=in_frame, transport_name=mem_name)\n    # update context\n    remote_input_metadata = remote_input.get_array_metadata()\n    LOCK2.acquire()\n    context_dict[\"remote_input\" + str(count)] = remote_input_metadata\n    context_dict[\"buffer_pool_metadata\" + str(count)] = buffer_pool.get_buffer_metadata()\n    LOCK2.release()\n\ndef main(context_dict, action):\n    # loading data\n    video_path = 'sample-mp4-file.mp4'\n    video_probe = ffmpeg.probe(video_path)\n    video_info = next((stream for stream in video_probe['streams'] if stream['codec_type'] == 'video'), None)\n    video_frames = int(video_info['nb_frames'])\n    frame_num = video_frames // SERVER_NUM + (1 if video_frames % SERVER_NUM != 0 else 0)\n    width = int(video_info['width'])\n    height = int(video_info['height'])\n    video_input = ffmpeg.input(video_path)\n    in_process = (\n        video_input.video.output('pipe:', format='rawvideo', pix_fmt='rgb24').run_async(pipe_stdout=True)\n    )\n\n    count = 1\n    context_dict = {}\n    threads = []\n    while True:\n        # setup\n        in_bytes = in_process.stdout.read(width * height * 3 * frame_num)\n        if not in_bytes:\n            break\n        \n        t = threading.Thread(target=processDataSlice, args=(count, in_bytes, context_dict, action, height, width))\n        t.start()\n        threads.append(t)\n        \n        count += 1\n\n    count = 0\n    for t in threads:\n        count += 1\n        print(count)\n        t.join()\n    \n    in_process.wait()\n    context_dict_in_byte = pickle.dumps(context_dict)\n    return {'meta': base64.b64encode(context_dict_in_byte).decode(\"ascii\")}\n",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "func1",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "mem1",
                "mem2",
                "mem3",
                "mem4"
              ],
              "dependents": [
                "func2"
              ],
              "parents": []
            },
            "runtimeType": "compute",
            "withMerged": []
          },
          "version": "0.0.1"
        },
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "\nimport os\nimport pickle\nimport threading\nimport numpy as np\nimport base64\nimport disaggrt.buffer_pool_lib as buffer_pool_lib\nfrom disaggrt.rdma_array import remote_array\n\nimport ffmpeg\n\nSERVER_NUM = 4\nLOCK1 = threading.Lock()\nLOCK2 = threading.Lock()\n\ndef fetch(count, context_dict, action, map):\n    mem_name = \"mem\" + str(count)\n    LOCK1.acquire()\n    trans = action.get_transport(mem_name, 'rdma')\n    LOCK1.release()\n    trans.reg(buffer_pool_lib.buffer_size)\n\n    LOCK1.acquire()\n    buffer_pool = buffer_pool_lib.buffer_pool({mem_name:trans}, context_dict[\"buffer_pool_metadata\" + str(count)])\n    LOCK1.release()\n    load_frames_remote = remote_array(buffer_pool, metadata=context_dict[\"remote_output\" + str(count)])\n    in_frame = load_frames_remote.materialize()\n\n    LOCK2.acquire()\n    map[mem_name] = in_frame\n    LOCK2.release()\n\ndef main(params, action):\n    # Load from previous memory\n    context_dict_in_b64 = params[\"func2\"][0]['meta']\n    context_dict_in_byte = base64.b64decode(context_dict_in_b64)\n    context_dict = pickle.loads(context_dict_in_byte)\n\n    threads = []\n    map = {}\n    for i in range(1, SERVER_NUM+1):\n        t = threading.Thread(target=fetch, args=(i, context_dict, action, map))\n        t.start()\n        threads.append(t)\n\n    for t in threads:\n        t.join()\n\n    # loading data\n    video_path = 'sample-mp4-file.mp4'\n    video_probe = ffmpeg.probe(video_path)\n    video_info = next((stream for stream in video_probe['streams'] if stream['codec_type'] == 'video'), None)\n    video_frames = int(video_info['nb_frames'])\n    fps = int(video_info['r_frame_rate'][:-2])\n    width = int(video_info['width'])\n    height = int(video_info['height'])\n    video_input = ffmpeg.input(video_path)\n\n    tmp_path = 'tmp.mp4'\n    tmp_process = (\n        ffmpeg\n            .input('pipe:', format='rawvideo', pix_fmt='rgb24', s='{}x{}'.format(width, height), framerate=fps)\n            .output(tmp_path, pix_fmt='yuv420p', r=fps)\n            .overwrite_output()\n            .run_async(pipe_stdin=True)\n    )\n\n    for i in range(1, SERVER_NUM+1):\n        mem_name = \"mem\" + str(i)\n        for frame in map[mem_name]:\n            tmp_process.stdin.write(\n            frame\n                .astype(np.uint8)\n                .tobytes()\n        )\n\n    tmp_process.stdin.close()\n    tmp_process.wait()\n\n    result_path = 'sample-mp4-file-new.mp4'\n    (\n        ffmpeg.input(tmp_path)\n              .output(video_input.audio, result_path, r=fps)\n              .run(overwrite_output=True)\n    )\n\n    os.remove(tmp_path)\n\n    return result_path",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "func3",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "mem1",
                "mem2",
                "mem3",
                "mem4"
              ],
              "dependents": [],
              "parents": [
                "func2"
              ]
            },
            "runtimeType": "compute",
            "withMerged": []
          },
          "version": "0.0.1"
        },
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "def main(_, action):\n    t = action.get_transport('memory', 'rdma_server')\n    t.serve()",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "mem4",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "func1",
                "func2",
                "func3"
              ],
              "dependents": [],
              "parents": []
            },
            "runtimeType": "memory",
            "withMerged": []
          },
          "version": "0.0.1"
        },
        {
          "annotations": [
            {
              "key": "exec",
              "value": "python"
            }
          ],
          "exec": {
            "kind": "python:3",
            "code": "def main(_, action):\n    t = action.get_transport('memory', 'rdma_server')\n    t.serve()",
            "binary": true,
            "main": "main"
          },
          "limits": {
            "concurrency": 1,
            "logs": 10,
            "resources": {
              "cpu": 1.0,
              "mem": "128 MB",
              "storage": "512 MB"
            },
            "timeout": 60000
          },
          "name": "mem2",
          "parameters": [],
          "publish": false,
          "porusParams": {
            "relationships": {
              "corunning": [
                "func1",
                "func2",
                "func3"
              ],
              "dependents": [],
              "parents": []
            },
            "runtimeType": "memory",
            "withMerged": []
          },
          "version": "0.0.1"
        }
      ],
      "publish": true
    }
  ],
  "publish": true
}